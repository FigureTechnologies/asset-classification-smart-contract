{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "AssetDefinitionV3",
  "description": "Defines a specific asset type associated with the contract.  Allows its specified type to be onboarded and verified.",
  "type": "object",
  "required": [
    "asset_type",
    "enabled",
    "verifiers"
  ],
  "properties": {
    "asset_type": {
      "description": "The unique name of the asset associated with the definition.",
      "type": "string"
    },
    "display_name": {
      "description": "A pretty human-readable name for this asset type (vs a typically snake_case asset_type name)",
      "type": [
        "string",
        "null"
      ]
    },
    "enabled": {
      "description": "Indicates whether or not the asset definition is enabled for use in the contract.  If disabled, requests to onboard assets of this type will be rejected.",
      "type": "boolean"
    },
    "verifiers": {
      "description": "Individual verifier definitions.  There can be many verifiers for a single asset type.",
      "type": "array",
      "items": {
        "$ref": "#/definitions/VerifierDetailV2"
      }
    }
  },
  "definitions": {
    "EntityDetail": {
      "description": "Various fields describing an entity, which could be an organization, account, etc.",
      "type": "object",
      "properties": {
        "description": {
          "description": "A short description of the entity's purpose.",
          "type": [
            "string",
            "null"
          ]
        },
        "home_url": {
          "description": "A web link that can send observers to the organization that the entity belongs to.",
          "type": [
            "string",
            "null"
          ]
        },
        "name": {
          "description": "A short name describing the entity.",
          "type": [
            "string",
            "null"
          ]
        },
        "source_url": {
          "description": "A web link that can send observers to the source code of the entity for increased transparency.",
          "type": [
            "string",
            "null"
          ]
        }
      }
    },
    "FeeDestinationV2": {
      "description": "Defines an external account designated as a recipient of funds during the verification process.",
      "type": "object",
      "required": [
        "address",
        "fee_amount"
      ],
      "properties": {
        "address": {
          "description": "The Provenance Blockchain bech32 address belonging to the account.",
          "type": "string"
        },
        "entity_detail": {
          "description": "An optional set of fields that define the fee destination, including its name and home URL location.",
          "anyOf": [
            {
              "$ref": "#/definitions/EntityDetail"
            },
            {
              "type": "null"
            }
          ]
        },
        "fee_amount": {
          "description": "The amount to be distributed to this account from the designated total [onboarding_cost](super::verifier_detail::VerifierDetailV2::onboarding_cost) of the containing [VerifierDetailV2](super::verifier_detail::VerifierDetailV2).  This number should always sum with the other fee destinations to be less than or at most equal to the total onboarding cost.",
          "allOf": [
            {
              "$ref": "#/definitions/Uint128"
            }
          ]
        }
      }
    },
    "OnboardingCost": {
      "description": "Defines costs used to onboard an asset to the contract for classification.",
      "type": "object",
      "required": [
        "cost",
        "fee_destinations"
      ],
      "properties": {
        "cost": {
          "description": "The amount of coin to be paid when an asset is sent to the [onboard_asset execute function](crate::execute::onboard_asset::onboard_asset).",
          "allOf": [
            {
              "$ref": "#/definitions/Uint128"
            }
          ]
        },
        "fee_destinations": {
          "description": "Any specific fee destinations that should be sent to sources other than the selected [verifier](super::verifier_detail::VerifierDetailV2).",
          "type": "array",
          "items": {
            "$ref": "#/definitions/FeeDestinationV2"
          }
        }
      }
    },
    "SubsequentClassificationDetail": {
      "description": "The root subsequent classifications node for a [VerifierDetailV2](super::verifier_detail::VerifierDetailV2). Contains the default subsequent costs for onboarding an asset with this verifier after already classifying it as a different type with the same verifier.",
      "type": "object",
      "properties": {
        "applicable_asset_types": {
          "description": "Specifies the asset types that an asset can be to have the subsequent classification cost apply to them.  If an asset has been classified as any of the types in this list, the cost will be used.  If the list is supplied as a None variant, any subsequent classifications will use the cost.  This value will be rejected if it is supplied as an empty vector.",
          "type": [
            "array",
            "null"
          ],
          "items": {
            "type": "string"
          }
        },
        "cost": {
          "description": "The onboarding cost to use when classifying an asset using the associated verifier after having already classified it as a different type with the same verifier.  If not set, the default verifier costs are used.",
          "anyOf": [
            {
              "$ref": "#/definitions/OnboardingCost"
            },
            {
              "type": "null"
            }
          ]
        }
      }
    },
    "Uint128": {
      "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
      "type": "string"
    },
    "VerifierDetailV2": {
      "description": "Defines the fees and addresses for a single verifier account for an [AssetDefinitionV3](super::asset_definition::AssetDefinitionV3).",
      "type": "object",
      "required": [
        "address",
        "fee_destinations",
        "onboarding_cost",
        "onboarding_denom"
      ],
      "properties": {
        "address": {
          "description": "The Provenance Blockchain bech32 address of the verifier account.",
          "type": "string"
        },
        "entity_detail": {
          "description": "An optional set of fields that define the verifier, including its name and home URL location.",
          "anyOf": [
            {
              "$ref": "#/definitions/EntityDetail"
            },
            {
              "type": "null"
            }
          ]
        },
        "fee_destinations": {
          "description": "Each account that should receive fees when onboarding a new scope to the contract. All of these destinations' individual [fee_amount](super::fee_destination::FeeDestinationV2::fee_amount) properties should sum to an amount less than or equal to the [onboarding_cost](super::verifier_detail::VerifierDetailV2::onboarding_cost). Amounts not precisely equal in sum will cause this verifier detail to be considered invalid and rejected in requests that include it.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/FeeDestinationV2"
          }
        },
        "onboarding_cost": {
          "description": "The total amount charged to use the onboarding process this this verifier.",
          "allOf": [
            {
              "$ref": "#/definitions/Uint128"
            }
          ]
        },
        "onboarding_denom": {
          "description": "The coin denomination used for this onboarding process.",
          "type": "string"
        },
        "retry_cost": {
          "description": "Defines the cost to use in place of the root [onboarding_cost](self::VerifierDetailV2::onboarding_cost) and [fee_destinations](self::VerifierDetailV2::fee_destinations) when retrying classification for a failed verification.  If not present, the original values used for the first verification will be used.",
          "anyOf": [
            {
              "$ref": "#/definitions/OnboardingCost"
            },
            {
              "type": "null"
            }
          ]
        },
        "subsequent_classification_detail": {
          "description": "An optional set of fields that define behaviors when classification is being run for an asset that is already classified as a different type.",
          "anyOf": [
            {
              "$ref": "#/definitions/SubsequentClassificationDetail"
            },
            {
              "type": "null"
            }
          ]
        }
      }
    }
  }
}
