window.SIDEBAR_ITEMS = {"fn":[["config_read_v2","Fetches a read-only cosmwasm storage singleton instance for loading the contractâ€™s state."],["config_v2","Fetches a mutable reference to the storage from a DepsMutC."],["delete_asset_definition_by_asset_type_v3","Attempts to delete an existing asset definition by asset type.  Returns an error if the definition does not exist or if the deletion fails.  Returns the asset type of the deleted definition on a successful deletion."],["delete_fee_payment_detail","Attempts to delete an existing payment detail by scope address.  Returns an error if the detail does not exist or if deletion fails."],["insert_asset_definition_v3","Inserts a new asset definition into storage. If a value already exists, an error will be returned. Note: Asset definitions must contain a unique asset_type value. An error will be returned if this unique constraint is violated."],["insert_fee_payment_detail","Inserts a new payment detail into storage.  If a value already exists, an error will be returned. Note: Each payment detail must contain a unique scope_address value, or the insert will be rejected with an error."],["list_asset_definitions_v3",""],["load_asset_definition_by_type_v3","Finds an existing asset definition by asset type, or returns an error if no definition is found."],["load_fee_payment_detail","Finds an existing fee payment detail by scope address, or returns an error if no detail is found."],["may_load_asset_definition_by_type_v3","Finds an existing asset definition in state by checking against the provided asset type, returning an Option that reflects whether or not the definition exists."],["may_load_fee_payment_detail","Attempts to find an existing fee payment detail by scope address, or returns a None variant if an error occurs or no detail is found."],["replace_asset_definition_v3","Replaces an existing asset definition in state with the provided value.  If no value exists for the given definition, an error will be returned.  Note: Map (the internal storage type) provides a really nice update() function that allows two branches (one for success and one for failure to find) that seems ideal for this functionality, but it requires a non-reference version of the data to be used. This requires that the provided definition must be cloned, which makes it vastly inefficient compared to this implementation."]],"struct":[["StateV2","Stores the main configurations for the contract internally."]]};