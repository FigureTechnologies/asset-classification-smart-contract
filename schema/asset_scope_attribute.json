{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "AssetScopeAttribute",
  "description": "An asset scope attribute contains all relevant information for asset classification, and is serialized directly as json into a Provenance Blockchain Attribute Module attribute on a Provenance Blockchain Metadata Scope.",
  "type": "object",
  "required": [
    "access_definitions",
    "asset_type",
    "asset_uuid",
    "onboarding_status",
    "requestor_address",
    "scope_address",
    "verifier_address"
  ],
  "properties": {
    "access_definitions": {
      "description": "All provided access definitions are stored in the attribute for external consumers, and can be externally manipulated by admin routes or verification tasks.",
      "type": "array",
      "items": {
        "$ref": "#/definitions/AccessDefinition"
      }
    },
    "asset_type": {
      "description": "The name of the type of asset that is being used to classify this scope.",
      "type": "string"
    },
    "asset_uuid": {
      "description": "A unique uuid v4 value that defines the asset contained within the scope.",
      "type": "string"
    },
    "latest_verification_result": {
      "description": "The most recent verification is kept on the scope attribute.  If the verifier determines that the asset cannot be classified, this value may be overwritten later by a subsequent onboard.",
      "anyOf": [
        {
          "$ref": "#/definitions/AssetVerificationResult"
        },
        {
          "type": "null"
        }
      ]
    },
    "latest_verifier_detail": {
      "description": "When the onboarding process runs, the verifier detail currently in contract storage for the verifier address chosen by the requestor is added to the scope attribute.  This ensures that if the verifier values change due to an external update, the original fee structure will be honored for the onboarding task placed originally.",
      "anyOf": [
        {
          "$ref": "#/definitions/VerifierDetail"
        },
        {
          "type": "null"
        }
      ]
    },
    "onboarding_status": {
      "description": "Indicates the portion of the classification process at which the scope currently is.",
      "allOf": [
        {
          "$ref": "#/definitions/AssetOnboardingStatus"
        }
      ]
    },
    "requestor_address": {
      "description": "The bech32 address of the account that requested this scope be classified.",
      "allOf": [
        {
          "$ref": "#/definitions/Addr"
        }
      ]
    },
    "scope_address": {
      "description": "The bech32 address with a prefix of \"scope\" that uniquely defines the scope.",
      "type": "string"
    },
    "verifier_address": {
      "description": "The bech32 address of the account that the requestor selected to perform verification of the underlying data within the scope.  This account decides whether or not the asset should be classified.",
      "allOf": [
        {
          "$ref": "#/definitions/Addr"
        }
      ]
    }
  },
  "definitions": {
    "AccessDefinition": {
      "description": "Defines a collection of [AccessRoute](super::access_route::AccessRoute) for a specific address.",
      "type": "object",
      "required": [
        "access_routes",
        "definition_type",
        "owner_address"
      ],
      "properties": {
        "access_routes": {
          "description": "A collection of [AccessRoute](super::access_route::AccessRoute) structs that define methods of obtaining the underlying data for a scope.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/AccessRoute"
          }
        },
        "definition_type": {
          "description": "Defines the source that created this definition.",
          "allOf": [
            {
              "$ref": "#/definitions/AccessDefinitionType"
            }
          ]
        },
        "owner_address": {
          "description": "The bech32 address of the account that created the underlying [AccessRoutes](super::access_route::AccessRoute).",
          "type": "string"
        }
      }
    },
    "AccessDefinitionType": {
      "description": "Allows access definitions to be differentiated based on their overarching type, versus having to differentiate them based on known addresses.",
      "type": "string",
      "enum": [
        "requestor",
        "verifier"
      ]
    },
    "AccessRoute": {
      "description": "Defines a method of obtaining underlying asset data for a scope.",
      "type": "object",
      "required": [
        "route"
      ],
      "properties": {
        "name": {
          "description": "An optional name parameter, allowing the creator of the route to give it a definition or to label it for external resources to identify it.",
          "type": [
            "string",
            "null"
          ]
        },
        "route": {
          "description": "A path to a resource that can provide underlying asset data for a scope.  Can be anything: http path, grpc, etc.",
          "type": "string"
        }
      }
    },
    "Addr": {
      "description": "A human readable address.\n\nIn Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.\n\nThis type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.\n\nThis type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.",
      "type": "string"
    },
    "AssetOnboardingStatus": {
      "description": "An enum that denotes the various states that an [AssetScopeAttribute](super::asset_scope_attribute::AssetScopeAttribute) can have.",
      "type": "string",
      "enum": [
        "pending",
        "denied",
        "approved"
      ]
    },
    "AssetVerificationResult": {
      "description": "A simple wrapper for the result of a verification for a scope.",
      "type": "object",
      "required": [
        "message",
        "success"
      ],
      "properties": {
        "message": {
          "description": "A free-form message describing the result of the verification process.",
          "type": "string"
        },
        "success": {
          "description": "If true, the asset is deemed as successfully classified.  On false, an issue arose with the verifier and/or underlying asset data that caused the scope to not be classified.",
          "type": "boolean"
        }
      }
    },
    "Decimal": {
      "description": "A fixed-point decimal value with 18 fractional digits, i.e. Decimal(1_000_000_000_000_000_000) == 1.0\n\nThe greatest possible value that can be represented is 340282366920938463463.374607431768211455 (which is (2^128 - 1) / 10^18)",
      "type": "string"
    },
    "EntityDetail": {
      "description": "Various fields describing an entity, which could be an organization, account, etc.",
      "type": "object",
      "properties": {
        "description": {
          "description": "A short description of the entity's purpose.",
          "type": [
            "string",
            "null"
          ]
        },
        "home_url": {
          "description": "A web link that can send observers to the organization that the entity belongs to.",
          "type": [
            "string",
            "null"
          ]
        },
        "name": {
          "description": "A short name describing the entity.",
          "type": [
            "string",
            "null"
          ]
        },
        "source_url": {
          "description": "A web link that can send observers to the source code of the entity for increased transparency.",
          "type": [
            "string",
            "null"
          ]
        }
      }
    },
    "FeeDestination": {
      "description": "Defines an external account designated as a recipient of funds during the verification process.",
      "type": "object",
      "required": [
        "address",
        "fee_percent"
      ],
      "properties": {
        "address": {
          "description": "The Provenance Blockchain bech32 address belonging to the account.",
          "type": "string"
        },
        "fee_percent": {
          "description": "The amount to be distributed to this account from the designated total [fee_percent](super::verifier_detail::VerifierDetail::fee_percent) of the containing [VerifierDetail](super::verifier_detail::VerifierDetail).  This number should always be between 0 and 1, and indicate a percentage.  Ex: 0.5 indicates 50%. For instance, if the fee total is 100nhash and the verifier detail's fee percent is .5 (50%) and the destination's fee percent is 1 (100%), then that fee destination account would receive 50nhash during the transaction, which is 100% of the 50% designated to fee accounts.",
          "allOf": [
            {
              "$ref": "#/definitions/Decimal"
            }
          ]
        }
      }
    },
    "Uint128": {
      "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
      "type": "string"
    },
    "VerifierDetail": {
      "description": "Defines the fees and addresses for a single verifier account for an [AssetDefinition](super::asset_definition::AssetDefinition).",
      "type": "object",
      "required": [
        "address",
        "fee_destinations",
        "fee_percent",
        "onboarding_cost",
        "onboarding_denom"
      ],
      "properties": {
        "address": {
          "description": "The Provenance Blockchain bech32 address of the verifier account.",
          "type": "string"
        },
        "entity_detail": {
          "description": "An optional set of fields that define the verifier, including its name and home URL location.",
          "anyOf": [
            {
              "$ref": "#/definitions/EntityDetail"
            },
            {
              "type": "null"
            }
          ]
        },
        "fee_destinations": {
          "description": "Each account that should receive the amount designated in the [fee_percent](self::VerifierDetail::fee_percent). All of these destinations' individual [fee_percent](super::fee_destination::FeeDestination::fee_percent) properties should sum to 1.  Less amounts will cause this verifier detail to be considered invalid and rejected in requests that include it.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/FeeDestination"
          }
        },
        "fee_percent": {
          "description": "The percent amount taken from the total [onboarding_cost](self::VerifierDetail::onboarding_cost) to send to the underlying [FeeDestinations](super::fee_destination::FeeDestination). This should be a number from 0 to 1, representing a percentage (ex: 0.35 = 35%).",
          "allOf": [
            {
              "$ref": "#/definitions/Decimal"
            }
          ]
        },
        "onboarding_cost": {
          "description": "The total amount charged to use the onboarding process this this verifier.",
          "allOf": [
            {
              "$ref": "#/definitions/Uint128"
            }
          ]
        },
        "onboarding_denom": {
          "description": "The coin denomination used for this onboarding process.",
          "type": "string"
        }
      }
    }
  }
}
