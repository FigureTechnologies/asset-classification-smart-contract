{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "AssetScopeAttribute",
  "description": "An asset scope attribute contains all relevant information for asset classification, and is serialized directly as json into a Provenance Blockchain Attribute Module attribute on a Provenance Blockchain Metadata Scope.",
  "type": "object",
  "required": [
    "access_definitions",
    "asset_type",
    "asset_uuid",
    "onboarding_status",
    "requestor_address",
    "scope_address",
    "verifier_address"
  ],
  "properties": {
    "access_definitions": {
      "description": "All provided access definitions are stored in the attribute for external consumers, and can be externally manipulated by admin routes or verification tasks.",
      "type": "array",
      "items": {
        "$ref": "#/definitions/AccessDefinition"
      }
    },
    "asset_type": {
      "description": "The name of the type of asset that is being used to classify this scope.",
      "type": "string"
    },
    "asset_uuid": {
      "description": "A unique uuid v4 value that defines the asset contained within the scope.",
      "type": "string"
    },
    "latest_verification_result": {
      "description": "The most recent verification is kept on the scope attribute.  If the verifier determines that the asset cannot be classified, this value may be overwritten later by a subsequent onboard.",
      "anyOf": [
        {
          "$ref": "#/definitions/AssetVerificationResult"
        },
        {
          "type": "null"
        }
      ]
    },
    "onboarding_status": {
      "description": "Indicates the portion of the classification process at which the scope currently is.",
      "allOf": [
        {
          "$ref": "#/definitions/AssetOnboardingStatus"
        }
      ]
    },
    "requestor_address": {
      "description": "The bech32 address of the account that requested this scope be classified.",
      "allOf": [
        {
          "$ref": "#/definitions/Addr"
        }
      ]
    },
    "scope_address": {
      "description": "The bech32 address with a prefix of \"scope\" that uniquely defines the scope.",
      "type": "string"
    },
    "verifier_address": {
      "description": "The bech32 address of the account that the requestor selected to perform verification of the underlying data within the scope.  This account decides whether or not the asset should be classified.",
      "allOf": [
        {
          "$ref": "#/definitions/Addr"
        }
      ]
    }
  },
  "definitions": {
    "AccessDefinition": {
      "description": "Defines a collection of [AccessRoute](super::access_route::AccessRoute) for a specific address.",
      "type": "object",
      "required": [
        "access_routes",
        "definition_type",
        "owner_address"
      ],
      "properties": {
        "access_routes": {
          "description": "A collection of [AccessRoute](super::access_route::AccessRoute) structs that define methods of obtaining the underlying data for a scope.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/AccessRoute"
          }
        },
        "definition_type": {
          "description": "Defines the source that created this definition.",
          "allOf": [
            {
              "$ref": "#/definitions/AccessDefinitionType"
            }
          ]
        },
        "owner_address": {
          "description": "The bech32 address of the account that created the underlying [AccessRoutes](super::access_route::AccessRoute).",
          "type": "string"
        }
      }
    },
    "AccessDefinitionType": {
      "description": "Allows access definitions to be differentiated based on their overarching type, versus having to differentiate them based on known addresses.",
      "oneOf": [
        {
          "description": "Indicates that the access definition was created by the requestor that onboarded the scope.",
          "type": "string",
          "enum": [
            "requestor"
          ]
        },
        {
          "description": "Indicates that the access definition was created by the verifier for a scope.",
          "type": "string",
          "enum": [
            "verifier"
          ]
        }
      ]
    },
    "AccessRoute": {
      "description": "Defines a method of obtaining underlying asset data for a scope.",
      "type": "object",
      "required": [
        "route"
      ],
      "properties": {
        "name": {
          "description": "An optional name parameter, allowing the creator of the route to give it a definition or to label it for external resources to identify it.",
          "type": [
            "string",
            "null"
          ]
        },
        "route": {
          "description": "A path to a resource that can provide underlying asset data for a scope.  Can be anything: http path, grpc, etc.",
          "type": "string"
        }
      }
    },
    "Addr": {
      "description": "A human readable address.\n\nIn Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.\n\nThis type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.\n\nThis type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.",
      "type": "string"
    },
    "AssetOnboardingStatus": {
      "description": "An enum that denotes the various states that an [AssetScopeAttribute](super::asset_scope_attribute::AssetScopeAttribute) can have.",
      "oneOf": [
        {
          "description": "Indicates that the asset has been onboarded but has yet to be verified.",
          "type": "string",
          "enum": [
            "pending"
          ]
        },
        {
          "description": "Indicates that the asset has been verified and is determined to be unfit to be classified as its designated asset type.",
          "type": "string",
          "enum": [
            "denied"
          ]
        },
        {
          "description": "Indicates that the asset has been verified and has been successfully classified as its designated asset type.",
          "type": "string",
          "enum": [
            "approved"
          ]
        }
      ]
    },
    "AssetVerificationResult": {
      "description": "A simple wrapper for the result of a verification for a scope.",
      "type": "object",
      "required": [
        "message",
        "success"
      ],
      "properties": {
        "message": {
          "description": "A free-form message describing the result of the verification process.",
          "type": "string"
        },
        "success": {
          "description": "If true, the asset is deemed as successfully classified.  On false, an issue arose with the verifier and/or underlying asset data that caused the scope to not be classified.",
          "type": "boolean"
        }
      }
    }
  }
}
