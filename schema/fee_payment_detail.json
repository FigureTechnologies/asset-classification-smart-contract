{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "FeePaymentDetail",
  "description": "Defines a fee established from a [VerifierDetailV2](super::verifier_detail::VerifierDetailV2) and its contained [FeeDestinations](super::fee_destination::FeeDestinationV2).",
  "type": "object",
  "required": [
    "payments",
    "scope_address"
  ],
  "properties": {
    "payments": {
      "description": "The breakdown of each fee charge.  This vector will always at least contain a single charge, which will be to send a payment to the verifier.",
      "type": "array",
      "items": {
        "$ref": "#/definitions/FeePayment"
      }
    },
    "scope_address": {
      "description": "The bech32 address of the onboarded scope related to the fee.  This address is used as the unique identifier for the fee, and to retrieve the associated [AssetScopeAttribute](super::asset_scope_attribute::AssetScopeAttribute) for finding the [requestor's address](super::asset_scope_attribute::AssetScopeAttribute::requestor_address) to which the fee is charged.",
      "type": "string"
    }
  },
  "definitions": {
    "Addr": {
      "description": "A human readable address.\n\nIn Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.\n\nThis type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.\n\nThis type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.",
      "type": "string"
    },
    "Coin": {
      "type": "object",
      "required": [
        "amount",
        "denom"
      ],
      "properties": {
        "amount": {
          "$ref": "#/definitions/Uint128"
        },
        "denom": {
          "type": "string"
        }
      }
    },
    "FeePayment": {
      "description": "Defines an individual fee to be charged to an account during the asset verification process.",
      "type": "object",
      "required": [
        "amount",
        "name",
        "recipient"
      ],
      "properties": {
        "amount": {
          "description": "The amount to be charged during the asset verification process.  The denom will always match the [onboarding_denom](super::verifier_detail::VerifierDetailV2::onboarding_denom) amount.  The coin's amount will be equal to the amount for a fee_destination in the verifier detail, and (onboarding_cost- fee_destination_total) for the verifier itself if that amount is > 0.",
          "allOf": [
            {
              "$ref": "#/definitions/Coin"
            }
          ]
        },
        "name": {
          "description": "A name describing to the end user (requestor) the purpose and target of the fee.",
          "type": "string"
        },
        "recipient": {
          "description": "The bech32 address of the recipient of the fee, derived from various fields in the [VerifierDetailV2](super::verifier_detail::VerifierDetailV2).",
          "allOf": [
            {
              "$ref": "#/definitions/Addr"
            }
          ]
        }
      }
    },
    "Uint128": {
      "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
      "type": "string"
    }
  }
}
