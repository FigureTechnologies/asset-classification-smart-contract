name: Build and Release

on: 
  push: 
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  CARGO_TERM_COLOR: always

jobs:
  check:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Toolchain
        uses: actions-rs/toolchain@v1
        with: 
          toolchain: stable
          default: true
          components: clippy, rustfmt
      - name: Cargo format
        uses: actions-rs/cargo@v1
        with:
          command: fmt
          args: --all -- --check
      - name: Cargo clippy
        uses: actions-rs/cargo@v1
        with:
          command: clippy
      - name: Cargo tarpaulin xml report
        uses: actions-rs/tarpaulin@v0.1
        with:
          version: '0.19.1'
          out-type: Xml
          args: '--ignore-config --ignore-tests --features enable-test-utils'
      # TODO: Enable when we move this to public-facing
      # - name: upload to codecov.io
      #   uses: codecov/codecov-action@v2
      #   with:
      #     files: cobertura.xml
      #     fail_ci_if_error: false
      #     verbose: true
      - name: Archive code coverage results
        uses: actions/upload-artifact@v1
        with:
          name: code-coverage-report
          path: cobertura.xml
  # TODO: Enable when we move this to be public-facing
  # release:
  #   needs: check
  #   runs-on: ubuntu-latest
  #   if: startsWith(github.ref, 'refs/tags/v')
  #   steps:
  #     - name: checkout
  #       uses: actions/checkout@v2
  #     - name: optimize
  #       run: make optimize
  #     - name: release
  #       uses: softprops/action-gh-release@v1
  #       env:
  #         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #       with: 
  #         files: |
  #           artifacts/asset_classification_smart_contract.wasm
  #           artifacts/checksums.txt

  release:
    needs: check
    runs-on: ubuntu-latest
    if: ${{ github.ref == 'refs/heads/main' }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2
    
      - name: Get release version
        run: | 
          APP_VERSION=$(cargo metadata | jq -r '.packages[] | select(.name == "asset-classification-smart-contract") | .version')
          echo "Using application version v$APP_VERSION for release"
          echo "RELEASE_VERSION=v$APP_VERSION" >> $GITHUB_ENV

      - name: Check release is new version
        run: |
          TAG_EXISTS=$(git show-ref --tags "$RELEASE_VERSION" || false)
          if [ $TAG_EXISTS ]; then 
            echo "Found existing Github tag [$RELEASE_VERSION]. Skipping release.";
          else 
            echo "Tag [$RELEASE_VERSION] has not yet been used. Continuing with release";
          fi
          echo "TAG_EXISTS=$TAG_EXISTS" >> $GITHUB_ENV

      - name: Optimize
        # No need to create the release WASM if the version hasn't changed and no new release will be made
        if: ${{ !env.TAG_EXISTS }}
        run: |
          # Update cargo first to ensure locks are good to go
          cargo update
          # Build the WASM output in the artifacts directory
          make optimize

      - name: Release
        uses: softprops/action-gh-release@v1
        # Only upload a new release if the attempted tag does not yet exist
        if: ${{ !env.TAG_EXISTS }}
        env: 
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          name: ${{ env.RELEASE_VERSION }}
          tag_name: ${{ env.RELEASE_VERSION }}
          files: |
            artifacts/asset_classification_smart_contract.wasm
            artifacts/checksums.txt