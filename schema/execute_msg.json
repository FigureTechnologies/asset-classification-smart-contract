{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "ExecuteMsg",
  "anyOf": [
    {
      "type": "object",
      "required": [
        "onboard_asset"
      ],
      "properties": {
        "onboard_asset": {
          "type": "object",
          "required": [
            "asset_type",
            "identifier",
            "verifier_address"
          ],
          "properties": {
            "access_routes": {
              "type": [
                "array",
                "null"
              ],
              "items": {
                "$ref": "#/definitions/AccessRoute"
              }
            },
            "asset_type": {
              "type": "string"
            },
            "identifier": {
              "description": "Expects an AssetIdentifier-compatible SerializedEnum",
              "allOf": [
                {
                  "$ref": "#/definitions/SerializedEnum"
                }
              ]
            },
            "verifier_address": {
              "type": "string"
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "verify_asset"
      ],
      "properties": {
        "verify_asset": {
          "type": "object",
          "required": [
            "identifier",
            "success"
          ],
          "properties": {
            "access_routes": {
              "type": [
                "array",
                "null"
              ],
              "items": {
                "$ref": "#/definitions/AccessRoute"
              }
            },
            "identifier": {
              "description": "Expects an AssetIdentifier-compatible SerializedEnum",
              "allOf": [
                {
                  "$ref": "#/definitions/SerializedEnum"
                }
              ]
            },
            "message": {
              "type": [
                "string",
                "null"
              ]
            },
            "success": {
              "type": "boolean"
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "add_asset_definition"
      ],
      "properties": {
        "add_asset_definition": {
          "type": "object",
          "required": [
            "asset_definition"
          ],
          "properties": {
            "asset_definition": {
              "$ref": "#/definitions/AssetDefinitionInput"
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "update_asset_definition"
      ],
      "properties": {
        "update_asset_definition": {
          "type": "object",
          "required": [
            "asset_definition"
          ],
          "properties": {
            "asset_definition": {
              "$ref": "#/definitions/AssetDefinitionInput"
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "toggle_asset_definition"
      ],
      "properties": {
        "toggle_asset_definition": {
          "type": "object",
          "required": [
            "asset_type",
            "expected_result"
          ],
          "properties": {
            "asset_type": {
              "type": "string"
            },
            "expected_result": {
              "type": "boolean"
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "add_asset_verifier"
      ],
      "properties": {
        "add_asset_verifier": {
          "type": "object",
          "required": [
            "asset_type",
            "verifier"
          ],
          "properties": {
            "asset_type": {
              "type": "string"
            },
            "verifier": {
              "$ref": "#/definitions/VerifierDetail"
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "update_asset_verifier"
      ],
      "properties": {
        "update_asset_verifier": {
          "type": "object",
          "required": [
            "asset_type",
            "verifier"
          ],
          "properties": {
            "asset_type": {
              "type": "string"
            },
            "verifier": {
              "$ref": "#/definitions/VerifierDetail"
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "update_access_routes"
      ],
      "properties": {
        "update_access_routes": {
          "type": "object",
          "required": [
            "access_routes",
            "identifier",
            "owner_address"
          ],
          "properties": {
            "access_routes": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/AccessRoute"
              }
            },
            "identifier": {
              "description": "Expects an AssetIdentifier-compatible SerializedEnum",
              "allOf": [
                {
                  "$ref": "#/definitions/SerializedEnum"
                }
              ]
            },
            "owner_address": {
              "type": "string"
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "bind_contract_alias"
      ],
      "properties": {
        "bind_contract_alias": {
          "type": "object",
          "required": [
            "alias_name"
          ],
          "properties": {
            "alias_name": {
              "type": "string"
            }
          }
        }
      },
      "additionalProperties": false
    }
  ],
  "definitions": {
    "AccessRoute": {
      "type": "object",
      "required": [
        "route"
      ],
      "properties": {
        "name": {
          "type": [
            "string",
            "null"
          ]
        },
        "route": {
          "type": "string"
        }
      }
    },
    "AssetDefinitionInput": {
      "description": "Allows the user to optionally specify the enabled flag on an asset definition, versus forcing it to be added manually on every request, when it will likely always be specified as `true`.",
      "type": "object",
      "required": [
        "asset_type",
        "scope_spec_identifier",
        "verifiers"
      ],
      "properties": {
        "asset_type": {
          "type": "string"
        },
        "bind_name": {
          "type": [
            "boolean",
            "null"
          ]
        },
        "enabled": {
          "type": [
            "boolean",
            "null"
          ]
        },
        "scope_spec_identifier": {
          "$ref": "#/definitions/SerializedEnum"
        },
        "verifiers": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/VerifierDetail"
          }
        }
      }
    },
    "Decimal": {
      "description": "A fixed-point decimal value with 18 fractional digits, i.e. Decimal(1_000_000_000_000_000_000) == 1.0\n\nThe greatest possible value that can be represented is 340282366920938463463.374607431768211455 (which is (2^128 - 1) / 10^18)",
      "type": "string"
    },
    "EntityDetail": {
      "type": "object",
      "properties": {
        "description": {
          "description": "A short description of the entity's purpose",
          "type": [
            "string",
            "null"
          ]
        },
        "home_url": {
          "description": "A web link that can send observers to the organization that the verifier belongs to",
          "type": [
            "string",
            "null"
          ]
        },
        "name": {
          "description": "A short name describing the entity",
          "type": [
            "string",
            "null"
          ]
        },
        "source_url": {
          "type": [
            "string",
            "null"
          ]
        }
      }
    },
    "FeeDestination": {
      "type": "object",
      "required": [
        "address",
        "fee_percent"
      ],
      "properties": {
        "address": {
          "type": "string"
        },
        "fee_percent": {
          "$ref": "#/definitions/Decimal"
        }
      }
    },
    "SerializedEnum": {
      "description": "There is a bug in cosmwasm 1.0.0's interaction with serde-json-wasm that causes floating point operations to be added into the compiled wasm, so the previous solution of using things like AssetIdentifier directly and specifying them with a tag and content param in their serde annotation is impossible as of 1.0.0.  This solution will allow existing requests to remain identical, but not generate floating point errors.  It makes the schema less useful, but it's a hack to fix a bug, so...\n\nIt's also worth noting that this solution can only create enum switches that have Strings as their values.  Anything different will not work for this solution and will require further adaptation and hackery.",
      "type": "object",
      "required": [
        "type",
        "value"
      ],
      "properties": {
        "type": {
          "description": "Specifies the type of enum to deserialize into.\n\nThe word \"type\" is a reserved keyword in Rust. Need to use serde to interpret this field correctly as the desired value of \"type\"",
          "type": "string"
        },
        "value": {
          "description": "Specifies the string value to be used for the type.",
          "type": "string"
        }
      }
    },
    "Uint128": {
      "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
      "type": "string"
    },
    "VerifierDetail": {
      "type": "object",
      "required": [
        "address",
        "fee_destinations",
        "fee_percent",
        "onboarding_cost",
        "onboarding_denom"
      ],
      "properties": {
        "address": {
          "type": "string"
        },
        "entity_detail": {
          "anyOf": [
            {
              "$ref": "#/definitions/EntityDetail"
            },
            {
              "type": "null"
            }
          ]
        },
        "fee_destinations": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/FeeDestination"
          }
        },
        "fee_percent": {
          "$ref": "#/definitions/Decimal"
        },
        "onboarding_cost": {
          "$ref": "#/definitions/Uint128"
        },
        "onboarding_denom": {
          "type": "string"
        }
      }
    }
  }
}
