{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "InitMsg",
  "type": "object",
  "required": [
    "asset_definitions",
    "base_contract_name",
    "bind_base_name"
  ],
  "properties": {
    "asset_definitions": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/AssetDefinitionInput"
      }
    },
    "base_contract_name": {
      "type": "string"
    },
    "bind_base_name": {
      "type": "boolean"
    },
    "is_test": {
      "type": [
        "boolean",
        "null"
      ]
    }
  },
  "definitions": {
    "AssetDefinitionInput": {
      "description": "Allows the user to optionally specify the enabled flag on an asset definition, versus forcing it to be added manually on every request, when it will likely always be specified as `true`.",
      "type": "object",
      "required": [
        "asset_type",
        "scope_spec_identifier",
        "verifiers"
      ],
      "properties": {
        "asset_type": {
          "type": "string"
        },
        "enabled": {
          "type": [
            "boolean",
            "null"
          ]
        },
        "scope_spec_identifier": {
          "$ref": "#/definitions/ScopeSpecIdentifier"
        },
        "verifiers": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/VerifierDetail"
          }
        }
      }
    },
    "Decimal": {
      "description": "A fixed-point decimal value with 18 fractional digits, i.e. Decimal(1_000_000_000_000_000_000) == 1.0\n\nThe greatest possible value that can be represented is 340282366920938463463.374607431768211455 (which is (2^128 - 1) / 10^18)",
      "type": "string"
    },
    "EntityDetail": {
      "type": "object",
      "properties": {
        "description": {
          "description": "A short description of the entity's purpose",
          "type": [
            "string",
            "null"
          ]
        },
        "name": {
          "description": "A short name describing the entity",
          "type": [
            "string",
            "null"
          ]
        },
        "web_address": {
          "description": "A web link that can send observers to a location that the verifier belongs to",
          "type": [
            "string",
            "null"
          ]
        }
      }
    },
    "FeeDestination": {
      "type": "object",
      "required": [
        "address",
        "fee_percent"
      ],
      "properties": {
        "address": {
          "type": "string"
        },
        "fee_percent": {
          "$ref": "#/definitions/Decimal"
        }
      }
    },
    "ScopeSpecIdentifier": {
      "oneOf": [
        {
          "type": "object",
          "required": [
            "type",
            "value"
          ],
          "properties": {
            "type": {
              "type": "string",
              "enum": [
                "uuid"
              ]
            },
            "value": {
              "type": "string"
            }
          }
        },
        {
          "type": "object",
          "required": [
            "type",
            "value"
          ],
          "properties": {
            "type": {
              "type": "string",
              "enum": [
                "address"
              ]
            },
            "value": {
              "type": "string"
            }
          }
        }
      ]
    },
    "Uint128": {
      "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
      "type": "string"
    },
    "VerifierDetail": {
      "type": "object",
      "required": [
        "address",
        "fee_destinations",
        "fee_percent",
        "onboarding_cost",
        "onboarding_denom"
      ],
      "properties": {
        "address": {
          "type": "string"
        },
        "entity_detail": {
          "anyOf": [
            {
              "$ref": "#/definitions/EntityDetail"
            },
            {
              "type": "null"
            }
          ]
        },
        "fee_destinations": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/FeeDestination"
          }
        },
        "fee_percent": {
          "$ref": "#/definitions/Decimal"
        },
        "onboarding_cost": {
          "$ref": "#/definitions/Uint128"
        },
        "onboarding_denom": {
          "type": "string"
        }
      }
    }
  }
}
